/**
 * 
 * 
 *
 * 
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from "rxjs/Observable";
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import IHttpClient from "../IHttpClient";
import { inject, injectable } from "inversify";
import { IAPIConfiguration } from "../IAPIConfiguration";
import { Headers } from "../Headers";
import HttpResponse from "../HttpResponse";

import { AnnotationDTO } from '../model/annotationDTO';
import { AnnotationPostDTO } from '../model/annotationPostDTO';
import { ResponseFormPOST } from '../model/responseFormPOST';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class AnnotationsService {
    private basePath: string = 'https://localhost';

    constructor(@inject("IApiHttpClient") private httpClient: IHttpClient,
        @inject("IAPIConfiguration") private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }
    /**
     * Get a annotation
     * Retrieve a annotation. Need URL encoded annotation URI
     * @param uri a sensor URI (Unique Resource Identifier)
     * @param Authorization Access token given
     
     */
    public getAnnotationByUri(uri: string, Authorization: string, observe?: 'body', headers?: Headers): Observable<Array<AnnotationDTO>>;
    public getAnnotationByUri(uri: string, Authorization: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<AnnotationDTO>>>;
    public getAnnotationByUri(uri: string, Authorization: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!uri){
            throw new Error('Required parameter uri was null or undefined when calling getAnnotationByUri.');
        }

        if (!Authorization){
            throw new Error('Required parameter Authorization was null or undefined when calling getAnnotationByUri.');
        }

        if (Authorization) {
            headers['Authorization'] = String(Authorization);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Array<AnnotationDTO>>> = this.httpClient.get(`${this.basePath}/annotations/${encodeURIComponent(String(uri))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<AnnotationDTO>>(httpResponse.response));
        }
        return response;
    }
    /**
     * Get all annotations corresponding to the search params given
     * Retrieve all annotations authorized for the user corresponding to the searched params given
     * @param Authorization Access token given
     * @param pageSize Number of elements per page (limited to 150000)
     * @param page Current page number
     * @param uri Search by annotation uri
     * @param creator Search by creator
     * @param target Search by target
     * @param description Search by comment
     * @param motivatedBy Search by motivation
     
     */
    public getAnnotationsBySearch(Authorization: string, pageSize?: number, page?: number, uri?: string, creator?: string, target?: string, description?: string, motivatedBy?: string, observe?: 'body', headers?: Headers): Observable<Array<AnnotationDTO>>;
    public getAnnotationsBySearch(Authorization: string, pageSize?: number, page?: number, uri?: string, creator?: string, target?: string, description?: string, motivatedBy?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<AnnotationDTO>>>;
    public getAnnotationsBySearch(Authorization: string, pageSize?: number, page?: number, uri?: string, creator?: string, target?: string, description?: string, motivatedBy?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!Authorization){
            throw new Error('Required parameter Authorization was null or undefined when calling getAnnotationsBySearch.');
        }

        let queryParameters: string[] = [];
        if (pageSize !== undefined) {
            queryParameters.push("pageSize="+encodeURIComponent(String(pageSize)));
        }
        if (page !== undefined) {
            queryParameters.push("page="+encodeURIComponent(String(page)));
        }
        if (uri !== undefined) {
            queryParameters.push("uri="+encodeURIComponent(String(uri)));
        }
        if (creator !== undefined) {
            queryParameters.push("creator="+encodeURIComponent(String(creator)));
        }
        if (target !== undefined) {
            queryParameters.push("target="+encodeURIComponent(String(target)));
        }
        if (description !== undefined) {
            queryParameters.push("description="+encodeURIComponent(String(description)));
        }
        if (motivatedBy !== undefined) {
            queryParameters.push("motivatedBy="+encodeURIComponent(String(motivatedBy)));
        }

        if (Authorization) {
            headers['Authorization'] = String(Authorization);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Array<AnnotationDTO>>> = this.httpClient.get(`${this.basePath}/annotations?${queryParameters.join('&')}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<AnnotationDTO>>(httpResponse.response));
        }
        return response;
    }
    /**
     * Post annotations
     * Register new annotations in the triplestore
     * @param Authorization Access token given
     * @param body JSON format of an annotation
     
     */
    public post1(Authorization: string, body?: Array<AnnotationPostDTO>, observe?: 'body', headers?: Headers): Observable<ResponseFormPOST>;
    public post1(Authorization: string, body?: Array<AnnotationPostDTO>, observe?: 'response', headers?: Headers): Observable<HttpResponse<ResponseFormPOST>>;
    public post1(Authorization: string, body?: Array<AnnotationPostDTO>, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!Authorization){
            throw new Error('Required parameter Authorization was null or undefined when calling post1.');
        }

        if (Authorization) {
            headers['Authorization'] = String(Authorization);
        }

        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<ResponseFormPOST>> = this.httpClient.post(`${this.basePath}/annotations`, body , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <ResponseFormPOST>(httpResponse.response));
        }
        return response;
    }
}
