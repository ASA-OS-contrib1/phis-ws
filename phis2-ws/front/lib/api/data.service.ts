/**
 * 
 * 
 *
 * 
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from "rxjs/Observable";
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import IHttpClient from "../IHttpClient";
import { inject, injectable } from "inversify";
import { IAPIConfiguration } from "../IAPIConfiguration";
import { Headers } from "../Headers";
import HttpResponse from "../HttpResponse";

import { Data } from '../model/data';
import { DataPostDTO } from '../model/dataPostDTO';
import { FileDescriptionDTO } from '../model/fileDescriptionDTO';
import { FileDescriptionWebPathPostDTO } from '../model/fileDescriptionWebPathPostDTO';
import { ModelObject } from '../model/modelObject';
import { ResponseFormPOST } from '../model/responseFormPOST';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class DataService {
    private basePath: string = 'https://localhost';

    constructor(@inject("IApiHttpClient") private httpClient: IHttpClient,
        @inject("IAPIConfiguration") private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }
    /**
     * Get data corresponding to the search parameters given.
     * Retrieve all data corresponding to the search parameters given,&lt;br/&gt;Date parameters could be either a datetime like: 2017-06-15T10:51:00+0200&lt;br/&gt;or simply a date like: 2017-06-15
     * @param variable Search by variable uri
     * @param Authorization Access token given
     * @param pageSize Number of elements per page (limited to 150000)
     * @param page Current page number
     * @param startDate Search by minimal date
     * @param endDate Search by maximal date
     * @param object Search by object uri
     * @param provenance Search by provenance uri
     * @param dateSortAsc Date search result order (&#39;true&#39; for ascending and &#39;false&#39; for descending)
     
     */
    public getData(variable: string, Authorization: string, pageSize?: number, page?: number, startDate?: string, endDate?: string, object?: string, provenance?: string, dateSortAsc?: boolean, observe?: 'body', headers?: Headers): Observable<Array<Data>>;
    public getData(variable: string, Authorization: string, pageSize?: number, page?: number, startDate?: string, endDate?: string, object?: string, provenance?: string, dateSortAsc?: boolean, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<Data>>>;
    public getData(variable: string, Authorization: string, pageSize?: number, page?: number, startDate?: string, endDate?: string, object?: string, provenance?: string, dateSortAsc?: boolean, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!variable){
            throw new Error('Required parameter variable was null or undefined when calling getData.');
        }

        if (!Authorization){
            throw new Error('Required parameter Authorization was null or undefined when calling getData.');
        }

        let queryParameters: string[] = [];
        if (pageSize !== undefined) {
            queryParameters.push("pageSize="+encodeURIComponent(String(pageSize)));
        }
        if (page !== undefined) {
            queryParameters.push("page="+encodeURIComponent(String(page)));
        }
        if (variable !== undefined) {
            queryParameters.push("variable="+encodeURIComponent(String(variable)));
        }
        if (startDate !== undefined) {
            queryParameters.push("startDate="+encodeURIComponent(String(startDate)));
        }
        if (endDate !== undefined) {
            queryParameters.push("endDate="+encodeURIComponent(String(endDate)));
        }
        if (object !== undefined) {
            queryParameters.push("object="+encodeURIComponent(String(object)));
        }
        if (provenance !== undefined) {
            queryParameters.push("provenance="+encodeURIComponent(String(provenance)));
        }
        if (dateSortAsc !== undefined) {
            queryParameters.push("dateSortAsc="+encodeURIComponent(String(dateSortAsc)));
        }

        if (Authorization) {
            headers['Authorization'] = String(Authorization);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Array<Data>>> = this.httpClient.get(`${this.basePath}/data?${queryParameters.join('&')}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<Data>>(httpResponse.response));
        }
        return response;
    }
    /**
     * Get data file
     * 
     * @param fileUri Search by fileUri
     
     */
    public getDataFile(fileUri: string, observe?: 'body', headers?: Headers): Observable<any>;
    public getDataFile(fileUri: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public getDataFile(fileUri: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!fileUri){
            throw new Error('Required parameter fileUri was null or undefined when calling getDataFile.');
        }

        headers['Accept'] = 'application/octet-stream';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/data/file/${encodeURIComponent(String(fileUri))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <any>(httpResponse.response));
        }
        return response;
    }
    /**
     * Get data file description
     * 
     * @param fileUri Search by fileUri
     * @param Authorization Access token given
     
     */
    public getDataFileDescription(fileUri: string, Authorization: string, observe?: 'body', headers?: Headers): Observable<FileDescriptionDTO>;
    public getDataFileDescription(fileUri: string, Authorization: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<FileDescriptionDTO>>;
    public getDataFileDescription(fileUri: string, Authorization: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!fileUri){
            throw new Error('Required parameter fileUri was null or undefined when calling getDataFileDescription.');
        }

        if (!Authorization){
            throw new Error('Required parameter Authorization was null or undefined when calling getDataFileDescription.');
        }

        if (Authorization) {
            headers['Authorization'] = String(Authorization);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<FileDescriptionDTO>> = this.httpClient.get(`${this.basePath}/data/file/${encodeURIComponent(String(fileUri))}/description`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <FileDescriptionDTO>(httpResponse.response));
        }
        return response;
    }
    /**
     * Retrieve data file descriptions corresponding to the search parameters given.
     * 
     * @param rdfType Search by rdf type uri
     * @param Authorization Access token given
     * @param pageSize Number of elements per page (limited to 150000)
     * @param page Current page number
     * @param startDate Search by minimal date
     * @param endDate Search by maximal date
     * @param provenance Search by provenance uri
     * @param concernedItems Search by concerned items uri
     * @param jsonValueFilter Search by json filter
     * @param dateSortAsc Date search result order (&#39;true&#39; for ascending and &#39;false&#39; for descending)
     
     */
    public getDataFileDescriptionsBySearch(rdfType: string, Authorization: string, pageSize?: number, page?: number, startDate?: string, endDate?: string, provenance?: string, concernedItems?: Array<string>, jsonValueFilter?: string, dateSortAsc?: boolean, observe?: 'body', headers?: Headers): Observable<Array<FileDescriptionDTO>>;
    public getDataFileDescriptionsBySearch(rdfType: string, Authorization: string, pageSize?: number, page?: number, startDate?: string, endDate?: string, provenance?: string, concernedItems?: Array<string>, jsonValueFilter?: string, dateSortAsc?: boolean, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<FileDescriptionDTO>>>;
    public getDataFileDescriptionsBySearch(rdfType: string, Authorization: string, pageSize?: number, page?: number, startDate?: string, endDate?: string, provenance?: string, concernedItems?: Array<string>, jsonValueFilter?: string, dateSortAsc?: boolean, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!rdfType){
            throw new Error('Required parameter rdfType was null or undefined when calling getDataFileDescriptionsBySearch.');
        }

        if (!Authorization){
            throw new Error('Required parameter Authorization was null or undefined when calling getDataFileDescriptionsBySearch.');
        }

        let queryParameters: string[] = [];
        if (pageSize !== undefined) {
            queryParameters.push("pageSize="+encodeURIComponent(String(pageSize)));
        }
        if (page !== undefined) {
            queryParameters.push("page="+encodeURIComponent(String(page)));
        }
        if (rdfType !== undefined) {
            queryParameters.push("rdfType="+encodeURIComponent(String(rdfType)));
        }
        if (startDate !== undefined) {
            queryParameters.push("startDate="+encodeURIComponent(String(startDate)));
        }
        if (endDate !== undefined) {
            queryParameters.push("endDate="+encodeURIComponent(String(endDate)));
        }
        if (provenance !== undefined) {
            queryParameters.push("provenance="+encodeURIComponent(String(provenance)));
        }
        if (concernedItems) {
            concernedItems.forEach((element) => {
                queryParameters.push("concernedItems="+encodeURIComponent(String(concernedItems)));
            })
        }
        if (jsonValueFilter !== undefined) {
            queryParameters.push("jsonValueFilter="+encodeURIComponent(String(jsonValueFilter)));
        }
        if (dateSortAsc !== undefined) {
            queryParameters.push("dateSortAsc="+encodeURIComponent(String(dateSortAsc)));
        }

        if (Authorization) {
            headers['Authorization'] = String(Authorization);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Array<FileDescriptionDTO>>> = this.httpClient.get(`${this.basePath}/data/file/search?${queryParameters.join('&')}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<FileDescriptionDTO>>(httpResponse.response));
        }
        return response;
    }
    /**
     * Get data corresponding to the search parameters given.
     * Retrieve all data corresponding to the search parameters given,&lt;br/&gt;Date parameters could be either a datetime like: 2017-06-15T10:51:00+0200&lt;br/&gt;or simply a date like: 2017-06-15
     * @param Authorization Access token given
     * @param pageSize Number of elements per page (limited to 150000)
     * @param page Current page number
     * @param variableUri Search by variable uri
     * @param startDate Search by minimal date
     * @param endDate Search by maximal date
     * @param objectUri Search by object uri
     * @param objectLabel Search by object label
     * @param provenanceUri Search by provenance uri
     * @param provenanceLabel Search by provenance label
     * @param dateSortAsc Date search result order (&#39;true&#39; for ascending and &#39;false&#39; for descending)
     
     */
    public getDataSearch(Authorization: string, pageSize?: number, page?: number, variableUri?: string, startDate?: string, endDate?: string, objectUri?: string, objectLabel?: string, provenanceUri?: string, provenanceLabel?: string, dateSortAsc?: boolean, observe?: 'body', headers?: Headers): Observable<Array<Data>>;
    public getDataSearch(Authorization: string, pageSize?: number, page?: number, variableUri?: string, startDate?: string, endDate?: string, objectUri?: string, objectLabel?: string, provenanceUri?: string, provenanceLabel?: string, dateSortAsc?: boolean, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<Data>>>;
    public getDataSearch(Authorization: string, pageSize?: number, page?: number, variableUri?: string, startDate?: string, endDate?: string, objectUri?: string, objectLabel?: string, provenanceUri?: string, provenanceLabel?: string, dateSortAsc?: boolean, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!Authorization){
            throw new Error('Required parameter Authorization was null or undefined when calling getDataSearch.');
        }

        let queryParameters: string[] = [];
        if (pageSize !== undefined) {
            queryParameters.push("pageSize="+encodeURIComponent(String(pageSize)));
        }
        if (page !== undefined) {
            queryParameters.push("page="+encodeURIComponent(String(page)));
        }
        if (variableUri !== undefined) {
            queryParameters.push("variableUri="+encodeURIComponent(String(variableUri)));
        }
        if (startDate !== undefined) {
            queryParameters.push("startDate="+encodeURIComponent(String(startDate)));
        }
        if (endDate !== undefined) {
            queryParameters.push("endDate="+encodeURIComponent(String(endDate)));
        }
        if (objectUri !== undefined) {
            queryParameters.push("objectUri="+encodeURIComponent(String(objectUri)));
        }
        if (objectLabel !== undefined) {
            queryParameters.push("objectLabel="+encodeURIComponent(String(objectLabel)));
        }
        if (provenanceUri !== undefined) {
            queryParameters.push("provenanceUri="+encodeURIComponent(String(provenanceUri)));
        }
        if (provenanceLabel !== undefined) {
            queryParameters.push("provenanceLabel="+encodeURIComponent(String(provenanceLabel)));
        }
        if (dateSortAsc !== undefined) {
            queryParameters.push("dateSortAsc="+encodeURIComponent(String(dateSortAsc)));
        }

        if (Authorization) {
            headers['Authorization'] = String(Authorization);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Array<Data>>> = this.httpClient.get(`${this.basePath}/data/search?${queryParameters.join('&')}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<Data>>(httpResponse.response));
        }
        return response;
    }
    /**
     * Post data
     * Register data in the database
     * @param Authorization Access token given
     * @param body JSON format to insert data
     
     */
    public postData(Authorization: string, body?: Array<DataPostDTO>, observe?: 'body', headers?: Headers): Observable<ResponseFormPOST>;
    public postData(Authorization: string, body?: Array<DataPostDTO>, observe?: 'response', headers?: Headers): Observable<HttpResponse<ResponseFormPOST>>;
    public postData(Authorization: string, body?: Array<DataPostDTO>, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!Authorization){
            throw new Error('Required parameter Authorization was null or undefined when calling postData.');
        }

        if (Authorization) {
            headers['Authorization'] = String(Authorization);
        }

        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<ResponseFormPOST>> = this.httpClient.post(`${this.basePath}/data`, body , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <ResponseFormPOST>(httpResponse.response));
        }
        return response;
    }
    /**
     * Post data file
     * 
     * @param body Metadata of the file
     * @param Authorization Access token given
     
     */
    public postDataFilePath(body: Array<FileDescriptionWebPathPostDTO>, Authorization: string, observe?: 'body', headers?: Headers): Observable<ResponseFormPOST>;
    public postDataFilePath(body: Array<FileDescriptionWebPathPostDTO>, Authorization: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<ResponseFormPOST>>;
    public postDataFilePath(body: Array<FileDescriptionWebPathPostDTO>, Authorization: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!body){
            throw new Error('Required parameter body was null or undefined when calling postDataFilePath.');
        }

        if (!Authorization){
            throw new Error('Required parameter Authorization was null or undefined when calling postDataFilePath.');
        }

        if (Authorization) {
            headers['Authorization'] = String(Authorization);
        }

        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<ResponseFormPOST>> = this.httpClient.post(`${this.basePath}/data/files`, body , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <ResponseFormPOST>(httpResponse.response));
        }
        return response;
    }
}
