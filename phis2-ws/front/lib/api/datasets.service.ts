/**
 * 
 * 
 *
 * 
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from "rxjs/Observable";
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import IHttpClient from "../IHttpClient";
import { inject, injectable } from "inversify";
import { IAPIConfiguration } from "../IAPIConfiguration";
import { Headers } from "../Headers";
import HttpResponse from "../HttpResponse";

import { Dataset } from '../model/dataset';
import { DatasetDTO } from '../model/datasetDTO';
import { ResponseFormPOST } from '../model/responseFormPOST';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class DatasetsService {
    private basePath: string = 'https://localhost';

    constructor(@inject("IApiHttpClient") private httpClient: IHttpClient,
        @inject("IAPIConfiguration") private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }
    /**
     * Get all data corresponding to the search params given
     * 
     * @param Authorization Access token given
     * @param pageSize Number of elements per page (limited to 150000)
     * @param page Current page number
     * @param experiment Search by experiment
     * @param variable Search by variable
     * @param agronomicalObjects Search by agronomical(s) object(s), separated by coma
     * @param startDate Search by interval - Start date
     * @param endDate Search by interval - End date
     * @param sensor Search by sensor
     * @param incertitude Search by incertitude
     
     */
    public getDataBySearch(Authorization: string, pageSize?: number, page?: number, experiment?: string, variable?: string, agronomicalObjects?: string, startDate?: string, endDate?: string, sensor?: string, incertitude?: string, observe?: 'body', headers?: Headers): Observable<Array<Dataset>>;
    public getDataBySearch(Authorization: string, pageSize?: number, page?: number, experiment?: string, variable?: string, agronomicalObjects?: string, startDate?: string, endDate?: string, sensor?: string, incertitude?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<Dataset>>>;
    public getDataBySearch(Authorization: string, pageSize?: number, page?: number, experiment?: string, variable?: string, agronomicalObjects?: string, startDate?: string, endDate?: string, sensor?: string, incertitude?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!Authorization){
            throw new Error('Required parameter Authorization was null or undefined when calling getDataBySearch.');
        }

        let queryParameters: string[] = [];
        if (pageSize !== undefined) {
            queryParameters.push("pageSize="+encodeURIComponent(String(pageSize)));
        }
        if (page !== undefined) {
            queryParameters.push("page="+encodeURIComponent(String(page)));
        }
        if (experiment !== undefined) {
            queryParameters.push("experiment="+encodeURIComponent(String(experiment)));
        }
        if (variable !== undefined) {
            queryParameters.push("variable="+encodeURIComponent(String(variable)));
        }
        if (agronomicalObjects !== undefined) {
            queryParameters.push("agronomicalObjects="+encodeURIComponent(String(agronomicalObjects)));
        }
        if (startDate !== undefined) {
            queryParameters.push("startDate="+encodeURIComponent(String(startDate)));
        }
        if (endDate !== undefined) {
            queryParameters.push("endDate="+encodeURIComponent(String(endDate)));
        }
        if (sensor !== undefined) {
            queryParameters.push("sensor="+encodeURIComponent(String(sensor)));
        }
        if (incertitude !== undefined) {
            queryParameters.push("incertitude="+encodeURIComponent(String(incertitude)));
        }

        if (Authorization) {
            headers['Authorization'] = String(Authorization);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Array<Dataset>>> = this.httpClient.get(`${this.basePath}/datasets?${queryParameters.join('&')}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<Dataset>>(httpResponse.response));
        }
        return response;
    }
    /**
     * Post dataset
     * 
     * @param body JSON format of raw data
     * @param Authorization Access token given
     
     */
    public postDatasetData(body: Array<DatasetDTO>, Authorization: string, observe?: 'body', headers?: Headers): Observable<ResponseFormPOST>;
    public postDatasetData(body: Array<DatasetDTO>, Authorization: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<ResponseFormPOST>>;
    public postDatasetData(body: Array<DatasetDTO>, Authorization: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!body){
            throw new Error('Required parameter body was null or undefined when calling postDatasetData.');
        }

        if (!Authorization){
            throw new Error('Required parameter Authorization was null or undefined when calling postDatasetData.');
        }

        if (Authorization) {
            headers['Authorization'] = String(Authorization);
        }

        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<ResponseFormPOST>> = this.httpClient.post(`${this.basePath}/datasets`, body , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <ResponseFormPOST>(httpResponse.response));
        }
        return response;
    }
}
