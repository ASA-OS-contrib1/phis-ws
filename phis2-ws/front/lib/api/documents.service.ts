/**
 * 
 * 
 *
 * 
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from "rxjs/Observable";
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import IHttpClient from "../IHttpClient";
import { inject, injectable } from "inversify";
import { IAPIConfiguration } from "../IAPIConfiguration";
import { Headers } from "../Headers";
import HttpResponse from "../HttpResponse";

import { DocumentMetadataDTO } from '../model/documentMetadataDTO';
import { ResponseFormPOST } from '../model/responseFormPOST';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class DocumentsService {
    private basePath: string = 'https://localhost';

    constructor(@inject("IApiHttpClient") private httpClient: IHttpClient,
        @inject("IAPIConfiguration") private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }
    /**
     * Get a document (by receiving it&#39;s uri)
     * Retrieve the document corresponding to the uri given
     * @param documentURI A document URI (Unique Resource Identifier)
     * @param Authorization Access token given
     
     */
    public getDocumentByUri(documentURI: string, Authorization: string, observe?: 'body', headers?: Headers): Observable<any>;
    public getDocumentByUri(documentURI: string, Authorization: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public getDocumentByUri(documentURI: string, Authorization: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!documentURI){
            throw new Error('Required parameter documentURI was null or undefined when calling getDocumentByUri.');
        }

        if (!Authorization){
            throw new Error('Required parameter Authorization was null or undefined when calling getDocumentByUri.');
        }

        if (Authorization) {
            headers['Authorization'] = String(Authorization);
        }

        headers['Accept'] = 'application/octet-stream';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/documents/${encodeURIComponent(String(documentURI))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <any>(httpResponse.response));
        }
        return response;
    }
    /**
     * Get all documents metadata corresponding to the searched params given
     * Retrieve all documents authorized for the user corresponding to the searched params given
     * @param Authorization Access token given
     * @param pageSize Number of elements per page (limited to 150000)
     * @param page Current page number
     * @param uri Search by URI
     * @param documentType Search by document type
     * @param creator Search by creator
     * @param language Search by language
     * @param title Search by title
     * @param creationDate Search by creation date
     * @param extension Search by extension
     * @param concernedItem Search by concerned item
     * @param status Search by status
     * @param sortByDate Sort results by date
     
     */
    public getDocumentsMetadataBySearch(Authorization: string, pageSize?: number, page?: number, uri?: string, documentType?: string, creator?: string, language?: string, title?: string, creationDate?: string, extension?: string, concernedItem?: string, status?: string, sortByDate?: 'asc' | 'desc', observe?: 'body', headers?: Headers): Observable<Array<DocumentMetadataDTO>>;
    public getDocumentsMetadataBySearch(Authorization: string, pageSize?: number, page?: number, uri?: string, documentType?: string, creator?: string, language?: string, title?: string, creationDate?: string, extension?: string, concernedItem?: string, status?: string, sortByDate?: 'asc' | 'desc', observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<DocumentMetadataDTO>>>;
    public getDocumentsMetadataBySearch(Authorization: string, pageSize?: number, page?: number, uri?: string, documentType?: string, creator?: string, language?: string, title?: string, creationDate?: string, extension?: string, concernedItem?: string, status?: string, sortByDate?: 'asc' | 'desc', observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!Authorization){
            throw new Error('Required parameter Authorization was null or undefined when calling getDocumentsMetadataBySearch.');
        }

        let queryParameters: string[] = [];
        if (pageSize !== undefined) {
            queryParameters.push("pageSize="+encodeURIComponent(String(pageSize)));
        }
        if (page !== undefined) {
            queryParameters.push("page="+encodeURIComponent(String(page)));
        }
        if (uri !== undefined) {
            queryParameters.push("uri="+encodeURIComponent(String(uri)));
        }
        if (documentType !== undefined) {
            queryParameters.push("documentType="+encodeURIComponent(String(documentType)));
        }
        if (creator !== undefined) {
            queryParameters.push("creator="+encodeURIComponent(String(creator)));
        }
        if (language !== undefined) {
            queryParameters.push("language="+encodeURIComponent(String(language)));
        }
        if (title !== undefined) {
            queryParameters.push("title="+encodeURIComponent(String(title)));
        }
        if (creationDate !== undefined) {
            queryParameters.push("creationDate="+encodeURIComponent(String(creationDate)));
        }
        if (extension !== undefined) {
            queryParameters.push("extension="+encodeURIComponent(String(extension)));
        }
        if (concernedItem !== undefined) {
            queryParameters.push("concernedItem="+encodeURIComponent(String(concernedItem)));
        }
        if (status !== undefined) {
            queryParameters.push("status="+encodeURIComponent(String(status)));
        }
        if (sortByDate !== undefined) {
            queryParameters.push("sortByDate="+encodeURIComponent(String(sortByDate)));
        }

        if (Authorization) {
            headers['Authorization'] = String(Authorization);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Array<DocumentMetadataDTO>>> = this.httpClient.get(`${this.basePath}/documents?${queryParameters.join('&')}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<DocumentMetadataDTO>>(httpResponse.response));
        }
        return response;
    }
    /**
     * Get all documents types
     * Retrieve all documents types 
     * @param Authorization Access token given
     * @param pageSize Number of elements per page (limited to 150000)
     * @param page Current page number
     
     */
    public getDocumentsType(Authorization: string, pageSize?: number, page?: number, observe?: 'body', headers?: Headers): Observable<any>;
    public getDocumentsType(Authorization: string, pageSize?: number, page?: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public getDocumentsType(Authorization: string, pageSize?: number, page?: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!Authorization){
            throw new Error('Required parameter Authorization was null or undefined when calling getDocumentsType.');
        }

        let queryParameters: string[] = [];
        if (pageSize !== undefined) {
            queryParameters.push("pageSize="+encodeURIComponent(String(pageSize)));
        }
        if (page !== undefined) {
            queryParameters.push("page="+encodeURIComponent(String(page)));
        }

        if (Authorization) {
            headers['Authorization'] = String(Authorization);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/documents/types?${queryParameters.join('&')}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <any>(httpResponse.response));
        }
        return response;
    }
    /**
     * Post data file
     * This can only be done by a PHIS-SILEX user. Not working from this documentation. Implement a client or use Postman application.
     * @param Authorization Access token given
     * @param body File to upload
     * @param uri URI given from \&quot;/documents\&quot; path for upload
     
     */
    public postDocumentFile(Authorization: string, body?: Blob, uri?: string, observe?: 'body', headers?: Headers): Observable<ResponseFormPOST>;
    public postDocumentFile(Authorization: string, body?: Blob, uri?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<ResponseFormPOST>>;
    public postDocumentFile(Authorization: string, body?: Blob, uri?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!Authorization){
            throw new Error('Required parameter Authorization was null or undefined when calling postDocumentFile.');
        }

        let queryParameters: string[] = [];
        if (uri !== undefined) {
            queryParameters.push("uri="+encodeURIComponent(String(uri)));
        }

        if (Authorization) {
            headers['Authorization'] = String(Authorization);
        }

        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/octet-stream';

        const response: Observable<HttpResponse<ResponseFormPOST>> = this.httpClient.post(`${this.basePath}/documents/upload?${queryParameters.join('&')}`, body , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <ResponseFormPOST>(httpResponse.response));
        }
        return response;
    }
    /**
     * Save a file
     * This can only be done by a PHIS-SILEX user.
     * @param body JSON Document metadata
     * @param Authorization Access token given
     
     */
    public postDocuments(body: Array<DocumentMetadataDTO>, Authorization: string, observe?: 'body', headers?: Headers): Observable<Array<DocumentMetadataDTO>>;
    public postDocuments(body: Array<DocumentMetadataDTO>, Authorization: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<DocumentMetadataDTO>>>;
    public postDocuments(body: Array<DocumentMetadataDTO>, Authorization: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!body){
            throw new Error('Required parameter body was null or undefined when calling postDocuments.');
        }

        if (!Authorization){
            throw new Error('Required parameter Authorization was null or undefined when calling postDocuments.');
        }

        if (Authorization) {
            headers['Authorization'] = String(Authorization);
        }

        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<Array<DocumentMetadataDTO>>> = this.httpClient.post(`${this.basePath}/documents`, body , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<DocumentMetadataDTO>>(httpResponse.response));
        }
        return response;
    }
    /**
     * Update document metadata
     * 
     * @param Authorization Access token given
     * @param body Json document metadata
     
     */
    public putDocumentMetadata(Authorization: string, body?: Array<DocumentMetadataDTO>, observe?: 'body', headers?: Headers): Observable<ResponseFormPOST>;
    public putDocumentMetadata(Authorization: string, body?: Array<DocumentMetadataDTO>, observe?: 'response', headers?: Headers): Observable<HttpResponse<ResponseFormPOST>>;
    public putDocumentMetadata(Authorization: string, body?: Array<DocumentMetadataDTO>, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!Authorization){
            throw new Error('Required parameter Authorization was null or undefined when calling putDocumentMetadata.');
        }

        if (Authorization) {
            headers['Authorization'] = String(Authorization);
        }

        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<ResponseFormPOST>> = this.httpClient.put(`${this.basePath}/documents`, body , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <ResponseFormPOST>(httpResponse.response));
        }
        return response;
    }
}
