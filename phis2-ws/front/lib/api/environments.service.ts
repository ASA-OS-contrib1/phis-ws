/**
 * 
 * 
 *
 * 
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from "rxjs/Observable";
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import IHttpClient from "../IHttpClient";
import { inject, injectable } from "inversify";
import { IAPIConfiguration } from "../IAPIConfiguration";
import { Headers } from "../Headers";
import HttpResponse from "../HttpResponse";

import { EnvironmentMeasureDTO } from '../model/environmentMeasureDTO';
import { EnvironmentMeasurePostDTO } from '../model/environmentMeasurePostDTO';
import { ResponseFormPOST } from '../model/responseFormPOST';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class EnvironmentsService {
    private basePath: string = 'https://localhost';

    constructor(@inject("IApiHttpClient") private httpClient: IHttpClient,
        @inject("IAPIConfiguration") private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }
    /**
     * Get all environment measures corresponding to the search params given
     * Retrieve all environment measures authorized for the user corresponding to the searched params given
     * @param variable Search by variable uri
     * @param Authorization Access token given
     * @param pageSize Number of elements per page (limited to 150000)
     * @param page Current page number
     * @param startDate Search by minimal date
     * @param endDate Search by maximal date
     * @param sensor Search by sensor uri
     * @param dateSortAsc Date search result order (&#39;true&#39; for ascending and &#39;false&#39; for descending)
     
     */
    public getEnvironmentMeasures(variable: string, Authorization: string, pageSize?: number, page?: number, startDate?: string, endDate?: string, sensor?: string, dateSortAsc?: boolean, observe?: 'body', headers?: Headers): Observable<Array<EnvironmentMeasureDTO>>;
    public getEnvironmentMeasures(variable: string, Authorization: string, pageSize?: number, page?: number, startDate?: string, endDate?: string, sensor?: string, dateSortAsc?: boolean, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<EnvironmentMeasureDTO>>>;
    public getEnvironmentMeasures(variable: string, Authorization: string, pageSize?: number, page?: number, startDate?: string, endDate?: string, sensor?: string, dateSortAsc?: boolean, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!variable){
            throw new Error('Required parameter variable was null or undefined when calling getEnvironmentMeasures.');
        }

        if (!Authorization){
            throw new Error('Required parameter Authorization was null or undefined when calling getEnvironmentMeasures.');
        }

        let queryParameters: string[] = [];
        if (pageSize !== undefined) {
            queryParameters.push("pageSize="+encodeURIComponent(String(pageSize)));
        }
        if (page !== undefined) {
            queryParameters.push("page="+encodeURIComponent(String(page)));
        }
        if (variable !== undefined) {
            queryParameters.push("variable="+encodeURIComponent(String(variable)));
        }
        if (startDate !== undefined) {
            queryParameters.push("startDate="+encodeURIComponent(String(startDate)));
        }
        if (endDate !== undefined) {
            queryParameters.push("endDate="+encodeURIComponent(String(endDate)));
        }
        if (sensor !== undefined) {
            queryParameters.push("sensor="+encodeURIComponent(String(sensor)));
        }
        if (dateSortAsc !== undefined) {
            queryParameters.push("dateSortAsc="+encodeURIComponent(String(dateSortAsc)));
        }

        if (Authorization) {
            headers['Authorization'] = String(Authorization);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Array<EnvironmentMeasureDTO>>> = this.httpClient.get(`${this.basePath}/environments?${queryParameters.join('&')}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<EnvironmentMeasureDTO>>(httpResponse.response));
        }
        return response;
    }
    /**
     * Post environment(s) measures
     * Register environment(s) measures in the database&lt;br/&gt; The &#39;value&#39; parameter could be a string representing any java BigDecimal&lt;br/&gt; By example it could be: -2, 3.14, 1.23E+3, -1.23e-12, etc...&lt;br/&gt; @see https://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html#BigDecimal(java.lang.String)
     * @param Authorization Access token given
     * @param body JSON format to insert environment
     
     */
    public postEnvironmentMeasures(Authorization: string, body?: Array<EnvironmentMeasurePostDTO>, observe?: 'body', headers?: Headers): Observable<ResponseFormPOST>;
    public postEnvironmentMeasures(Authorization: string, body?: Array<EnvironmentMeasurePostDTO>, observe?: 'response', headers?: Headers): Observable<HttpResponse<ResponseFormPOST>>;
    public postEnvironmentMeasures(Authorization: string, body?: Array<EnvironmentMeasurePostDTO>, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!Authorization){
            throw new Error('Required parameter Authorization was null or undefined when calling postEnvironmentMeasures.');
        }

        if (Authorization) {
            headers['Authorization'] = String(Authorization);
        }

        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<ResponseFormPOST>> = this.httpClient.post(`${this.basePath}/environments`, body , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <ResponseFormPOST>(httpResponse.response));
        }
        return response;
    }
}
