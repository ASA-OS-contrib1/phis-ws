/**
 * 
 * 
 *
 * 
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from "rxjs/Observable";
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import IHttpClient from "../IHttpClient";
import { inject, injectable } from "inversify";
import { IAPIConfiguration } from "../IAPIConfiguration";
import { Headers } from "../Headers";
import HttpResponse from "../HttpResponse";

import { Experiment } from '../model/experiment';
import { ExperimentDTO } from '../model/experimentDTO';
import { ExperimentPostDTO } from '../model/experimentPostDTO';
import { ResponseFormPOST } from '../model/responseFormPOST';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class ExperimentsService {
    private basePath: string = 'https://localhost';

    constructor(@inject("IApiHttpClient") private httpClient: IHttpClient,
        @inject("IAPIConfiguration") private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }
    /**
     * Get an experiment
     * Retrieve an experiment. Need URL encoded experiment URI (Unique resource identifier).
     * @param experiment An experiment URI (Unique Resource Identifier)
     * @param Authorization Access token given
     * @param pageSize Number of elements per page (limited to 150000)
     * @param page Current page number
     
     */
    public getExperimentDetail(experiment: string, Authorization: string, pageSize?: number, page?: number, observe?: 'body', headers?: Headers): Observable<Array<Experiment>>;
    public getExperimentDetail(experiment: string, Authorization: string, pageSize?: number, page?: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<Experiment>>>;
    public getExperimentDetail(experiment: string, Authorization: string, pageSize?: number, page?: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!experiment){
            throw new Error('Required parameter experiment was null or undefined when calling getExperimentDetail.');
        }

        if (!Authorization){
            throw new Error('Required parameter Authorization was null or undefined when calling getExperimentDetail.');
        }

        let queryParameters: string[] = [];
        if (pageSize !== undefined) {
            queryParameters.push("pageSize="+encodeURIComponent(String(pageSize)));
        }
        if (page !== undefined) {
            queryParameters.push("page="+encodeURIComponent(String(page)));
        }

        if (Authorization) {
            headers['Authorization'] = String(Authorization);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Array<Experiment>>> = this.httpClient.get(`${this.basePath}/experiments/${encodeURIComponent(String(experiment))}?${queryParameters.join('&')}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<Experiment>>(httpResponse.response));
        }
        return response;
    }
    /**
     * Get all experiments corresponding to the searched params given
     * Retrieve all experiments authorized for the user corresponding to the searched params given
     * @param Authorization Access token given
     * @param pageSize Number of elements per page (limited to 150000)
     * @param page Current page number
     * @param uri Search by uri
     * @param projectUri Search by project uri
     * @param startDate Search by start date
     * @param endDate Search by end date
     * @param field Search by field
     * @param campaign Search by campaign
     * @param place Search by place
     * @param alias Search by alias
     * @param keywords Search by keywords
     
     */
    public getExperimentsBySearch(Authorization: string, pageSize?: number, page?: number, uri?: string, projectUri?: string, startDate?: string, endDate?: string, field?: string, campaign?: string, place?: string, alias?: string, keywords?: string, observe?: 'body', headers?: Headers): Observable<Array<Experiment>>;
    public getExperimentsBySearch(Authorization: string, pageSize?: number, page?: number, uri?: string, projectUri?: string, startDate?: string, endDate?: string, field?: string, campaign?: string, place?: string, alias?: string, keywords?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<Experiment>>>;
    public getExperimentsBySearch(Authorization: string, pageSize?: number, page?: number, uri?: string, projectUri?: string, startDate?: string, endDate?: string, field?: string, campaign?: string, place?: string, alias?: string, keywords?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!Authorization){
            throw new Error('Required parameter Authorization was null or undefined when calling getExperimentsBySearch.');
        }

        let queryParameters: string[] = [];
        if (pageSize !== undefined) {
            queryParameters.push("pageSize="+encodeURIComponent(String(pageSize)));
        }
        if (page !== undefined) {
            queryParameters.push("page="+encodeURIComponent(String(page)));
        }
        if (uri !== undefined) {
            queryParameters.push("uri="+encodeURIComponent(String(uri)));
        }
        if (projectUri !== undefined) {
            queryParameters.push("projectUri="+encodeURIComponent(String(projectUri)));
        }
        if (startDate !== undefined) {
            queryParameters.push("startDate="+encodeURIComponent(String(startDate)));
        }
        if (endDate !== undefined) {
            queryParameters.push("endDate="+encodeURIComponent(String(endDate)));
        }
        if (field !== undefined) {
            queryParameters.push("field="+encodeURIComponent(String(field)));
        }
        if (campaign !== undefined) {
            queryParameters.push("campaign="+encodeURIComponent(String(campaign)));
        }
        if (place !== undefined) {
            queryParameters.push("place="+encodeURIComponent(String(place)));
        }
        if (alias !== undefined) {
            queryParameters.push("alias="+encodeURIComponent(String(alias)));
        }
        if (keywords !== undefined) {
            queryParameters.push("keywords="+encodeURIComponent(String(keywords)));
        }

        if (Authorization) {
            headers['Authorization'] = String(Authorization);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Array<Experiment>>> = this.httpClient.get(`${this.basePath}/experiments?${queryParameters.join('&')}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<Experiment>>(httpResponse.response));
        }
        return response;
    }
    /**
     * Post a experiment
     * Register a new experiment in the database
     * @param Authorization Access token given
     * @param body JSON format of experiment data
     
     */
    public postExperiment(Authorization: string, body?: Array<ExperimentPostDTO>, observe?: 'body', headers?: Headers): Observable<ResponseFormPOST>;
    public postExperiment(Authorization: string, body?: Array<ExperimentPostDTO>, observe?: 'response', headers?: Headers): Observable<HttpResponse<ResponseFormPOST>>;
    public postExperiment(Authorization: string, body?: Array<ExperimentPostDTO>, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!Authorization){
            throw new Error('Required parameter Authorization was null or undefined when calling postExperiment.');
        }

        if (Authorization) {
            headers['Authorization'] = String(Authorization);
        }

        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<ResponseFormPOST>> = this.httpClient.post(`${this.basePath}/experiments`, body , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <ResponseFormPOST>(httpResponse.response));
        }
        return response;
    }
    /**
     * Update experiment
     * 
     * @param Authorization Access token given
     * @param body JSON format of experiment data
     
     */
    public putExperiment(Authorization: string, body?: Array<ExperimentDTO>, observe?: 'body', headers?: Headers): Observable<ResponseFormPOST>;
    public putExperiment(Authorization: string, body?: Array<ExperimentDTO>, observe?: 'response', headers?: Headers): Observable<HttpResponse<ResponseFormPOST>>;
    public putExperiment(Authorization: string, body?: Array<ExperimentDTO>, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!Authorization){
            throw new Error('Required parameter Authorization was null or undefined when calling putExperiment.');
        }

        if (Authorization) {
            headers['Authorization'] = String(Authorization);
        }

        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<ResponseFormPOST>> = this.httpClient.put(`${this.basePath}/experiments`, body , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <ResponseFormPOST>(httpResponse.response));
        }
        return response;
    }
    /**
     * Update the sensors which participates in an experiment
     * 
     * @param uri An experiment URI (Unique Resource Identifier)
     * @param Authorization Access token given
     * @param body List of sensors uris.
     
     */
    public putSensors(uri: string, Authorization: string, body?: Array<string>, observe?: 'body', headers?: Headers): Observable<ResponseFormPOST>;
    public putSensors(uri: string, Authorization: string, body?: Array<string>, observe?: 'response', headers?: Headers): Observable<HttpResponse<ResponseFormPOST>>;
    public putSensors(uri: string, Authorization: string, body?: Array<string>, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!uri){
            throw new Error('Required parameter uri was null or undefined when calling putSensors.');
        }

        if (!Authorization){
            throw new Error('Required parameter Authorization was null or undefined when calling putSensors.');
        }

        if (Authorization) {
            headers['Authorization'] = String(Authorization);
        }

        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<ResponseFormPOST>> = this.httpClient.put(`${this.basePath}/experiments/${encodeURIComponent(String(uri))}/sensors`, body , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <ResponseFormPOST>(httpResponse.response));
        }
        return response;
    }
    /**
     * Update the observed variables of an experiment
     * 
     * @param uri An experiment URI (Unique Resource Identifier)
     * @param Authorization Access token given
     * @param body List of variables uris
     
     */
    public putVariables(uri: string, Authorization: string, body?: Array<string>, observe?: 'body', headers?: Headers): Observable<ResponseFormPOST>;
    public putVariables(uri: string, Authorization: string, body?: Array<string>, observe?: 'response', headers?: Headers): Observable<HttpResponse<ResponseFormPOST>>;
    public putVariables(uri: string, Authorization: string, body?: Array<string>, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!uri){
            throw new Error('Required parameter uri was null or undefined when calling putVariables.');
        }

        if (!Authorization){
            throw new Error('Required parameter Authorization was null or undefined when calling putVariables.');
        }

        if (Authorization) {
            headers['Authorization'] = String(Authorization);
        }

        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<ResponseFormPOST>> = this.httpClient.put(`${this.basePath}/experiments/${encodeURIComponent(String(uri))}/variables`, body , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <ResponseFormPOST>(httpResponse.response));
        }
        return response;
    }
}
