/**
 * 
 * 
 *
 * 
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from "rxjs/Observable";
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import IHttpClient from "../IHttpClient";
import { inject, injectable } from "inversify";
import { IAPIConfiguration } from "../IAPIConfiguration";
import { Headers } from "../Headers";
import HttpResponse from "../HttpResponse";

import { ImageMetadata } from '../model/imageMetadata';
import { ImageMetadataDTO } from '../model/imageMetadataDTO';
import { ResponseFormPOST } from '../model/responseFormPOST';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class ImagesService {
    private basePath: string = 'https://localhost';

    constructor(@inject("IApiHttpClient") private httpClient: IHttpClient,
        @inject("IAPIConfiguration") private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }
    /**
     * Get all images corresponding to the search params given
     * 
     * @param Authorization Access token given
     * @param pageSize Number of elements per page (limited to 150000)
     * @param page Current page number
     * @param uri Search by image uri
     * @param rdfType Search by image type
     * @param concernedItems Search by concerned item uri - each concerned item uri must be separated by \&quot;;\&quot;
     * @param startDate Search by interval - start date
     * @param endDate Search by interval - end date
     * @param sensor Search by sensor
     
     */
    public getImagesBySearch(Authorization: string, pageSize?: number, page?: number, uri?: string, rdfType?: string, concernedItems?: string, startDate?: string, endDate?: string, sensor?: string, observe?: 'body', headers?: Headers): Observable<Array<ImageMetadata>>;
    public getImagesBySearch(Authorization: string, pageSize?: number, page?: number, uri?: string, rdfType?: string, concernedItems?: string, startDate?: string, endDate?: string, sensor?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<ImageMetadata>>>;
    public getImagesBySearch(Authorization: string, pageSize?: number, page?: number, uri?: string, rdfType?: string, concernedItems?: string, startDate?: string, endDate?: string, sensor?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!Authorization){
            throw new Error('Required parameter Authorization was null or undefined when calling getImagesBySearch.');
        }

        let queryParameters: string[] = [];
        if (pageSize !== undefined) {
            queryParameters.push("pageSize="+encodeURIComponent(String(pageSize)));
        }
        if (page !== undefined) {
            queryParameters.push("page="+encodeURIComponent(String(page)));
        }
        if (uri !== undefined) {
            queryParameters.push("uri="+encodeURIComponent(String(uri)));
        }
        if (rdfType !== undefined) {
            queryParameters.push("rdfType="+encodeURIComponent(String(rdfType)));
        }
        if (concernedItems !== undefined) {
            queryParameters.push("concernedItems="+encodeURIComponent(String(concernedItems)));
        }
        if (startDate !== undefined) {
            queryParameters.push("startDate="+encodeURIComponent(String(startDate)));
        }
        if (endDate !== undefined) {
            queryParameters.push("endDate="+encodeURIComponent(String(endDate)));
        }
        if (sensor !== undefined) {
            queryParameters.push("sensor="+encodeURIComponent(String(sensor)));
        }

        if (Authorization) {
            headers['Authorization'] = String(Authorization);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Array<ImageMetadata>>> = this.httpClient.get(`${this.basePath}/images?${queryParameters.join('&')}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<ImageMetadata>>(httpResponse.response));
        }
        return response;
    }
    /**
     * Post data file
     * This can only be done by a PHIS-SILEX user. Not working from this documentation. Implement a client or use Postman application.
     * @param Authorization Access token given
     * @param body File to upload
     * @param uri Uri given from \&quot;images\&quot; path for upload
     
     */
    public postImageFile(Authorization: string, body?: Blob, uri?: string, observe?: 'body', headers?: Headers): Observable<ResponseFormPOST>;
    public postImageFile(Authorization: string, body?: Blob, uri?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<ResponseFormPOST>>;
    public postImageFile(Authorization: string, body?: Blob, uri?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!Authorization){
            throw new Error('Required parameter Authorization was null or undefined when calling postImageFile.');
        }

        let queryParameters: string[] = [];
        if (uri !== undefined) {
            queryParameters.push("uri="+encodeURIComponent(String(uri)));
        }

        if (Authorization) {
            headers['Authorization'] = String(Authorization);
        }

        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/octet-stream';

        const response: Observable<HttpResponse<ResponseFormPOST>> = this.httpClient.post(`${this.basePath}/images/upload?${queryParameters.join('&')}`, body , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <ResponseFormPOST>(httpResponse.response));
        }
        return response;
    }
    /**
     * Save a file
     * This can only be done by a PHIS-SILEX admin.
     * @param body JSON Image metadata
     * @param Authorization Access token given
     
     */
    public postImagesMetadata(body: Array<ImageMetadataDTO>, Authorization: string, observe?: 'body', headers?: Headers): Observable<Array<ImageMetadataDTO>>;
    public postImagesMetadata(body: Array<ImageMetadataDTO>, Authorization: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<ImageMetadataDTO>>>;
    public postImagesMetadata(body: Array<ImageMetadataDTO>, Authorization: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!body){
            throw new Error('Required parameter body was null or undefined when calling postImagesMetadata.');
        }

        if (!Authorization){
            throw new Error('Required parameter Authorization was null or undefined when calling postImagesMetadata.');
        }

        if (Authorization) {
            headers['Authorization'] = String(Authorization);
        }

        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<Array<ImageMetadataDTO>>> = this.httpClient.post(`${this.basePath}/images`, body , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<ImageMetadataDTO>>(httpResponse.response));
        }
        return response;
    }
}
