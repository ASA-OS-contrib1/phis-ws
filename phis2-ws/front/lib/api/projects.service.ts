/**
 * 
 * 
 *
 * 
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from "rxjs/Observable";
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import IHttpClient from "../IHttpClient";
import { inject, injectable } from "inversify";
import { IAPIConfiguration } from "../IAPIConfiguration";
import { Headers } from "../Headers";
import HttpResponse from "../HttpResponse";

import { ProjectDTO } from '../model/projectDTO';
import { ProjectDetailDTO } from '../model/projectDetailDTO';
import { ProjectPostDTO } from '../model/projectPostDTO';
import { ProjectPutDTO } from '../model/projectPutDTO';
import { ResponseFormPOST } from '../model/responseFormPOST';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class ProjectsService {
    private basePath: string = 'https://localhost';

    constructor(@inject("IApiHttpClient") private httpClient: IHttpClient,
        @inject("IAPIConfiguration") private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }
    /**
     * Get a project by its URI.
     * Retrieve the project authorized for the user corresponding to theU RI given
     * @param uri A project URI (Unique Resource Identifier)
     * @param Authorization Access token given
     * @param pageSize Number of elements per page (limited to 150000)
     * @param page Current page number
     
     */
    public getById(uri: string, Authorization: string, pageSize?: number, page?: number, observe?: 'body', headers?: Headers): Observable<Array<ProjectDetailDTO>>;
    public getById(uri: string, Authorization: string, pageSize?: number, page?: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<ProjectDetailDTO>>>;
    public getById(uri: string, Authorization: string, pageSize?: number, page?: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!uri){
            throw new Error('Required parameter uri was null or undefined when calling getById.');
        }

        if (!Authorization){
            throw new Error('Required parameter Authorization was null or undefined when calling getById.');
        }

        let queryParameters: string[] = [];
        if (pageSize !== undefined) {
            queryParameters.push("pageSize="+encodeURIComponent(String(pageSize)));
        }
        if (page !== undefined) {
            queryParameters.push("page="+encodeURIComponent(String(page)));
        }

        if (Authorization) {
            headers['Authorization'] = String(Authorization);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Array<ProjectDetailDTO>>> = this.httpClient.get(`${this.basePath}/projects/${encodeURIComponent(String(uri))}?${queryParameters.join('&')}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<ProjectDetailDTO>>(httpResponse.response));
        }
        return response;
    }
    /**
     * Get all projects corresponding to the searched params given
     * Retrieve all projects authorized for the user corresponding to the searched params given
     * @param Authorization Access token given
     * @param pageSize Number of elements per page (limited to 150000)
     * @param page Current page number
     * @param uri Search by URI
     * @param name Search by project name
     * @param shortname Search by shortname
     * @param financialFunding Search by financial funding
     * @param financialReference Search by financial reference
     * @param description Search by description
     * @param startDate Search by start date
     * @param endDate Search by end date
     * @param homePage Search by home page
     * @param objective Search by objective
     
     */
    public getBySearch(Authorization: string, pageSize?: number, page?: number, uri?: string, name?: string, shortname?: string, financialFunding?: string, financialReference?: string, description?: string, startDate?: string, endDate?: string, homePage?: string, objective?: string, observe?: 'body', headers?: Headers): Observable<Array<ProjectDTO>>;
    public getBySearch(Authorization: string, pageSize?: number, page?: number, uri?: string, name?: string, shortname?: string, financialFunding?: string, financialReference?: string, description?: string, startDate?: string, endDate?: string, homePage?: string, objective?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<ProjectDTO>>>;
    public getBySearch(Authorization: string, pageSize?: number, page?: number, uri?: string, name?: string, shortname?: string, financialFunding?: string, financialReference?: string, description?: string, startDate?: string, endDate?: string, homePage?: string, objective?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!Authorization){
            throw new Error('Required parameter Authorization was null or undefined when calling getBySearch.');
        }

        let queryParameters: string[] = [];
        if (pageSize !== undefined) {
            queryParameters.push("pageSize="+encodeURIComponent(String(pageSize)));
        }
        if (page !== undefined) {
            queryParameters.push("page="+encodeURIComponent(String(page)));
        }
        if (uri !== undefined) {
            queryParameters.push("uri="+encodeURIComponent(String(uri)));
        }
        if (name !== undefined) {
            queryParameters.push("name="+encodeURIComponent(String(name)));
        }
        if (shortname !== undefined) {
            queryParameters.push("shortname="+encodeURIComponent(String(shortname)));
        }
        if (financialFunding !== undefined) {
            queryParameters.push("financialFunding="+encodeURIComponent(String(financialFunding)));
        }
        if (financialReference !== undefined) {
            queryParameters.push("financialReference="+encodeURIComponent(String(financialReference)));
        }
        if (description !== undefined) {
            queryParameters.push("description="+encodeURIComponent(String(description)));
        }
        if (startDate !== undefined) {
            queryParameters.push("startDate="+encodeURIComponent(String(startDate)));
        }
        if (endDate !== undefined) {
            queryParameters.push("endDate="+encodeURIComponent(String(endDate)));
        }
        if (homePage !== undefined) {
            queryParameters.push("homePage="+encodeURIComponent(String(homePage)));
        }
        if (objective !== undefined) {
            queryParameters.push("objective="+encodeURIComponent(String(objective)));
        }

        if (Authorization) {
            headers['Authorization'] = String(Authorization);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Array<ProjectDTO>>> = this.httpClient.get(`${this.basePath}/projects?${queryParameters.join('&')}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<ProjectDTO>>(httpResponse.response));
        }
        return response;
    }
    /**
     * Post a project
     * Register a new project in the database
     * @param Authorization Access token given
     * @param body JSON format of project data
     
     */
    public post3(Authorization: string, body?: Array<ProjectPostDTO>, observe?: 'body', headers?: Headers): Observable<ResponseFormPOST>;
    public post3(Authorization: string, body?: Array<ProjectPostDTO>, observe?: 'response', headers?: Headers): Observable<HttpResponse<ResponseFormPOST>>;
    public post3(Authorization: string, body?: Array<ProjectPostDTO>, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!Authorization){
            throw new Error('Required parameter Authorization was null or undefined when calling post3.');
        }

        if (Authorization) {
            headers['Authorization'] = String(Authorization);
        }

        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<ResponseFormPOST>> = this.httpClient.post(`${this.basePath}/projects`, body , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <ResponseFormPOST>(httpResponse.response));
        }
        return response;
    }
    /**
     * Put project(s)
     * Update project(s) in the database
     * @param Authorization Access token given
     * @param body JSON format of project data
     
     */
    public put2(Authorization: string, body?: Array<ProjectPutDTO>, observe?: 'body', headers?: Headers): Observable<ResponseFormPOST>;
    public put2(Authorization: string, body?: Array<ProjectPutDTO>, observe?: 'response', headers?: Headers): Observable<HttpResponse<ResponseFormPOST>>;
    public put2(Authorization: string, body?: Array<ProjectPutDTO>, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!Authorization){
            throw new Error('Required parameter Authorization was null or undefined when calling put2.');
        }

        if (Authorization) {
            headers['Authorization'] = String(Authorization);
        }

        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<ResponseFormPOST>> = this.httpClient.put(`${this.basePath}/projects`, body , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <ResponseFormPOST>(httpResponse.response));
        }
        return response;
    }
}
