/**
 * 
 * 
 *
 * 
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from "rxjs/Observable";
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import IHttpClient from "../IHttpClient";
import { inject, injectable } from "inversify";
import { IAPIConfiguration } from "../IAPIConfiguration";
import { Headers } from "../Headers";
import HttpResponse from "../HttpResponse";

import { ResponseFormPOST } from '../model/responseFormPOST';
import { Sensor } from '../model/sensor';
import { SensorDTO } from '../model/sensorDTO';
import { SensorDetailDTO } from '../model/sensorDetailDTO';
import { SensorPostDTO } from '../model/sensorPostDTO';
import { SensorProfileDTO } from '../model/sensorProfileDTO';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class SensorsService {
    private basePath: string = 'https://localhost';

    constructor(@inject("IApiHttpClient") private httpClient: IHttpClient,
        @inject("IAPIConfiguration") private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }
    /**
     * Get a sensor
     * Retrieve a sensor. Need URL encoded sensor URI
     * @param uri a sensor URI (Unique Resource Identifier)
     * @param Authorization Access token given
     * @param pageSize Number of elements per page (limited to 150000)
     * @param page Current page number
     
     */
    public getSensorDetails(uri: string, Authorization: string, pageSize?: number, page?: number, observe?: 'body', headers?: Headers): Observable<Array<SensorDetailDTO>>;
    public getSensorDetails(uri: string, Authorization: string, pageSize?: number, page?: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<SensorDetailDTO>>>;
    public getSensorDetails(uri: string, Authorization: string, pageSize?: number, page?: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!uri){
            throw new Error('Required parameter uri was null or undefined when calling getSensorDetails.');
        }

        if (!Authorization){
            throw new Error('Required parameter Authorization was null or undefined when calling getSensorDetails.');
        }

        let queryParameters: string[] = [];
        if (pageSize !== undefined) {
            queryParameters.push("pageSize="+encodeURIComponent(String(pageSize)));
        }
        if (page !== undefined) {
            queryParameters.push("page="+encodeURIComponent(String(page)));
        }

        if (Authorization) {
            headers['Authorization'] = String(Authorization);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Array<SensorDetailDTO>>> = this.httpClient.get(`${this.basePath}/sensors/${encodeURIComponent(String(uri))}?${queryParameters.join('&')}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<SensorDetailDTO>>(httpResponse.response));
        }
        return response;
    }
    /**
     * Get a sensor profile
     * Retrieve a sensor profile. Need URL encoded sensor URI
     * @param uri a sensor URI (Unique Resource Identifier)
     * @param Authorization Access token given
     * @param pageSize Number of elements per page (limited to 150000)
     * @param page Current page number
     
     */
    public getSensorProfile(uri: string, Authorization: string, pageSize?: number, page?: number, observe?: 'body', headers?: Headers): Observable<Array<Sensor>>;
    public getSensorProfile(uri: string, Authorization: string, pageSize?: number, page?: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<Sensor>>>;
    public getSensorProfile(uri: string, Authorization: string, pageSize?: number, page?: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!uri){
            throw new Error('Required parameter uri was null or undefined when calling getSensorProfile.');
        }

        if (!Authorization){
            throw new Error('Required parameter Authorization was null or undefined when calling getSensorProfile.');
        }

        let queryParameters: string[] = [];
        if (pageSize !== undefined) {
            queryParameters.push("pageSize="+encodeURIComponent(String(pageSize)));
        }
        if (page !== undefined) {
            queryParameters.push("page="+encodeURIComponent(String(page)));
        }

        if (Authorization) {
            headers['Authorization'] = String(Authorization);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Array<Sensor>>> = this.httpClient.get(`${this.basePath}/sensors/profiles/${encodeURIComponent(String(uri))}?${queryParameters.join('&')}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<Sensor>>(httpResponse.response));
        }
        return response;
    }
    /**
     * Get all sensors corresponding to the search params given
     * Retrieve all sensors authorized for the user corresponding to the searched params given
     * @param Authorization Access token given
     * @param pageSize Number of elements per page (limited to 150000)
     * @param page Current page number
     * @param uri Search by uri
     * @param rdfType Search by type uri
     * @param label Search by label
     * @param brand Search by brand
     * @param serialNumber Search by serial number
     * @param model Search by model
     * @param inServiceDate Search by service date
     * @param dateOfPurchase Search by date of purchase
     * @param dateOfLastCalibration Search by date of last calibration
     * @param personInCharge Search by person in charge
     
     */
    public getSensorsBySearch(Authorization: string, pageSize?: number, page?: number, uri?: string, rdfType?: string, label?: string, brand?: string, serialNumber?: string, model?: string, inServiceDate?: string, dateOfPurchase?: string, dateOfLastCalibration?: string, personInCharge?: string, observe?: 'body', headers?: Headers): Observable<Array<SensorDetailDTO>>;
    public getSensorsBySearch(Authorization: string, pageSize?: number, page?: number, uri?: string, rdfType?: string, label?: string, brand?: string, serialNumber?: string, model?: string, inServiceDate?: string, dateOfPurchase?: string, dateOfLastCalibration?: string, personInCharge?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<SensorDetailDTO>>>;
    public getSensorsBySearch(Authorization: string, pageSize?: number, page?: number, uri?: string, rdfType?: string, label?: string, brand?: string, serialNumber?: string, model?: string, inServiceDate?: string, dateOfPurchase?: string, dateOfLastCalibration?: string, personInCharge?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!Authorization){
            throw new Error('Required parameter Authorization was null or undefined when calling getSensorsBySearch.');
        }

        let queryParameters: string[] = [];
        if (pageSize !== undefined) {
            queryParameters.push("pageSize="+encodeURIComponent(String(pageSize)));
        }
        if (page !== undefined) {
            queryParameters.push("page="+encodeURIComponent(String(page)));
        }
        if (uri !== undefined) {
            queryParameters.push("uri="+encodeURIComponent(String(uri)));
        }
        if (rdfType !== undefined) {
            queryParameters.push("rdfType="+encodeURIComponent(String(rdfType)));
        }
        if (label !== undefined) {
            queryParameters.push("label="+encodeURIComponent(String(label)));
        }
        if (brand !== undefined) {
            queryParameters.push("brand="+encodeURIComponent(String(brand)));
        }
        if (serialNumber !== undefined) {
            queryParameters.push("serialNumber="+encodeURIComponent(String(serialNumber)));
        }
        if (model !== undefined) {
            queryParameters.push("model="+encodeURIComponent(String(model)));
        }
        if (inServiceDate !== undefined) {
            queryParameters.push("inServiceDate="+encodeURIComponent(String(inServiceDate)));
        }
        if (dateOfPurchase !== undefined) {
            queryParameters.push("dateOfPurchase="+encodeURIComponent(String(dateOfPurchase)));
        }
        if (dateOfLastCalibration !== undefined) {
            queryParameters.push("dateOfLastCalibration="+encodeURIComponent(String(dateOfLastCalibration)));
        }
        if (personInCharge !== undefined) {
            queryParameters.push("personInCharge="+encodeURIComponent(String(personInCharge)));
        }

        if (Authorization) {
            headers['Authorization'] = String(Authorization);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Array<SensorDetailDTO>>> = this.httpClient.get(`${this.basePath}/sensors?${queryParameters.join('&')}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<SensorDetailDTO>>(httpResponse.response));
        }
        return response;
    }
    /**
     * Post a sensor
     * Register a new sensor in the database
     * @param Authorization Access token given
     * @param body JSON format of sensor data
     
     */
    public post5(Authorization: string, body?: Array<SensorPostDTO>, observe?: 'body', headers?: Headers): Observable<ResponseFormPOST>;
    public post5(Authorization: string, body?: Array<SensorPostDTO>, observe?: 'response', headers?: Headers): Observable<HttpResponse<ResponseFormPOST>>;
    public post5(Authorization: string, body?: Array<SensorPostDTO>, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!Authorization){
            throw new Error('Required parameter Authorization was null or undefined when calling post5.');
        }

        if (Authorization) {
            headers['Authorization'] = String(Authorization);
        }

        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<ResponseFormPOST>> = this.httpClient.post(`${this.basePath}/sensors`, body , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <ResponseFormPOST>(httpResponse.response));
        }
        return response;
    }
    /**
     * Post sensor(s) profile(s)
     * Register sensor(s) profile(s) in the database
     * @param Authorization Access token given
     * @param body JSON format of sensor profile data
     
     */
    public postProfiles(Authorization: string, body?: Array<SensorProfileDTO>, observe?: 'body', headers?: Headers): Observable<ResponseFormPOST>;
    public postProfiles(Authorization: string, body?: Array<SensorProfileDTO>, observe?: 'response', headers?: Headers): Observable<HttpResponse<ResponseFormPOST>>;
    public postProfiles(Authorization: string, body?: Array<SensorProfileDTO>, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!Authorization){
            throw new Error('Required parameter Authorization was null or undefined when calling postProfiles.');
        }

        if (Authorization) {
            headers['Authorization'] = String(Authorization);
        }

        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<ResponseFormPOST>> = this.httpClient.post(`${this.basePath}/sensors/profiles`, body , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <ResponseFormPOST>(httpResponse.response));
        }
        return response;
    }
    /**
     * Update sensors
     * 
     * @param Authorization Access token given
     * @param body JSON format of sensor data
     
     */
    public put6(Authorization: string, body?: Array<SensorDTO>, observe?: 'body', headers?: Headers): Observable<ResponseFormPOST>;
    public put6(Authorization: string, body?: Array<SensorDTO>, observe?: 'response', headers?: Headers): Observable<HttpResponse<ResponseFormPOST>>;
    public put6(Authorization: string, body?: Array<SensorDTO>, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!Authorization){
            throw new Error('Required parameter Authorization was null or undefined when calling put6.');
        }

        if (Authorization) {
            headers['Authorization'] = String(Authorization);
        }

        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<ResponseFormPOST>> = this.httpClient.put(`${this.basePath}/sensors`, body , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <ResponseFormPOST>(httpResponse.response));
        }
        return response;
    }
    /**
     * Update the measured variables of a sensor
     * 
     * @param uri a sensor URI (Unique Resource Identifier)
     * @param Authorization Access token given
     * @param body List of variables uris
     
     */
    public putMeasuredVariables1(uri: string, Authorization: string, body?: Array<string>, observe?: 'body', headers?: Headers): Observable<ResponseFormPOST>;
    public putMeasuredVariables1(uri: string, Authorization: string, body?: Array<string>, observe?: 'response', headers?: Headers): Observable<HttpResponse<ResponseFormPOST>>;
    public putMeasuredVariables1(uri: string, Authorization: string, body?: Array<string>, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!uri){
            throw new Error('Required parameter uri was null or undefined when calling putMeasuredVariables1.');
        }

        if (!Authorization){
            throw new Error('Required parameter Authorization was null or undefined when calling putMeasuredVariables1.');
        }

        if (Authorization) {
            headers['Authorization'] = String(Authorization);
        }

        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<ResponseFormPOST>> = this.httpClient.put(`${this.basePath}/sensors/${encodeURIComponent(String(uri))}/variables`, body , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <ResponseFormPOST>(httpResponse.response));
        }
        return response;
    }
}
