/**
 * 
 * 
 *
 * 
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from "rxjs/Observable";
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import IHttpClient from "../IHttpClient";
import { inject, injectable } from "inversify";
import { IAPIConfiguration } from "../IAPIConfiguration";
import { Headers } from "../Headers";
import HttpResponse from "../HttpResponse";

import { ResponseFormPOST } from '../model/responseFormPOST';
import { User } from '../model/user';
import { UserDTO } from '../model/userDTO';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class UserService {
    private basePath: string = 'https://localhost';

    constructor(@inject("IApiHttpClient") private httpClient: IHttpClient,
        @inject("IAPIConfiguration") private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }
    /**
     * Get all users corresponding to the searched params given
     * Retrieve all users authorized for the user corresponding to the searched params given
     * @param Authorization Access token given
     * @param pageSize Number of elements per page (limited to 150000)
     * @param page Current page number
     * @param email Search by email
     * @param firstName Search by first name
     * @param familyName Search by family name
     * @param address Search by address
     * @param phone Search by phone
     * @param affiliation Search by affiliation
     * @param orcid Search by orcid
     * @param admin Search by admin
     * @param available Search by available
     * @param uri Search by uri
     
     */
    public getUserBySearch(Authorization: string, pageSize?: number, page?: number, email?: string, firstName?: string, familyName?: string, address?: string, phone?: string, affiliation?: string, orcid?: string, admin?: string, available?: string, uri?: string, observe?: 'body', headers?: Headers): Observable<Array<User>>;
    public getUserBySearch(Authorization: string, pageSize?: number, page?: number, email?: string, firstName?: string, familyName?: string, address?: string, phone?: string, affiliation?: string, orcid?: string, admin?: string, available?: string, uri?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<User>>>;
    public getUserBySearch(Authorization: string, pageSize?: number, page?: number, email?: string, firstName?: string, familyName?: string, address?: string, phone?: string, affiliation?: string, orcid?: string, admin?: string, available?: string, uri?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!Authorization){
            throw new Error('Required parameter Authorization was null or undefined when calling getUserBySearch.');
        }

        let queryParameters: string[] = [];
        if (pageSize !== undefined) {
            queryParameters.push("pageSize="+encodeURIComponent(String(pageSize)));
        }
        if (page !== undefined) {
            queryParameters.push("page="+encodeURIComponent(String(page)));
        }
        if (email !== undefined) {
            queryParameters.push("email="+encodeURIComponent(String(email)));
        }
        if (firstName !== undefined) {
            queryParameters.push("firstName="+encodeURIComponent(String(firstName)));
        }
        if (familyName !== undefined) {
            queryParameters.push("familyName="+encodeURIComponent(String(familyName)));
        }
        if (address !== undefined) {
            queryParameters.push("address="+encodeURIComponent(String(address)));
        }
        if (phone !== undefined) {
            queryParameters.push("phone="+encodeURIComponent(String(phone)));
        }
        if (affiliation !== undefined) {
            queryParameters.push("affiliation="+encodeURIComponent(String(affiliation)));
        }
        if (orcid !== undefined) {
            queryParameters.push("orcid="+encodeURIComponent(String(orcid)));
        }
        if (admin !== undefined) {
            queryParameters.push("admin="+encodeURIComponent(String(admin)));
        }
        if (available !== undefined) {
            queryParameters.push("available="+encodeURIComponent(String(available)));
        }
        if (uri !== undefined) {
            queryParameters.push("uri="+encodeURIComponent(String(uri)));
        }

        if (Authorization) {
            headers['Authorization'] = String(Authorization);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Array<User>>> = this.httpClient.get(`${this.basePath}/users?${queryParameters.join('&')}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<User>>(httpResponse.response));
        }
        return response;
    }
    /**
     * Get a user
     * Retrieve a user. Need user email
     * @param userEmail A user email
     * @param Authorization Access token given
     * @param pageSize Number of elements per page (limited to 150000)
     * @param page Current page number
     
     */
    public getUserDetails(userEmail: string, Authorization: string, pageSize?: number, page?: number, observe?: 'body', headers?: Headers): Observable<Array<User>>;
    public getUserDetails(userEmail: string, Authorization: string, pageSize?: number, page?: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<User>>>;
    public getUserDetails(userEmail: string, Authorization: string, pageSize?: number, page?: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userEmail){
            throw new Error('Required parameter userEmail was null or undefined when calling getUserDetails.');
        }

        if (!Authorization){
            throw new Error('Required parameter Authorization was null or undefined when calling getUserDetails.');
        }

        let queryParameters: string[] = [];
        if (pageSize !== undefined) {
            queryParameters.push("pageSize="+encodeURIComponent(String(pageSize)));
        }
        if (page !== undefined) {
            queryParameters.push("page="+encodeURIComponent(String(page)));
        }

        if (Authorization) {
            headers['Authorization'] = String(Authorization);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Array<User>>> = this.httpClient.get(`${this.basePath}/users/${encodeURIComponent(String(userEmail))}?${queryParameters.join('&')}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<User>>(httpResponse.response));
        }
        return response;
    }
    /**
     * Post a user
     * Register a new user in the database
     * @param Authorization Access token given
     * @param body JSON format of user data
     
     */
    public postUser(Authorization: string, body?: Array<UserDTO>, observe?: 'body', headers?: Headers): Observable<ResponseFormPOST>;
    public postUser(Authorization: string, body?: Array<UserDTO>, observe?: 'response', headers?: Headers): Observable<HttpResponse<ResponseFormPOST>>;
    public postUser(Authorization: string, body?: Array<UserDTO>, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!Authorization){
            throw new Error('Required parameter Authorization was null or undefined when calling postUser.');
        }

        if (Authorization) {
            headers['Authorization'] = String(Authorization);
        }

        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<ResponseFormPOST>> = this.httpClient.post(`${this.basePath}/users`, body , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <ResponseFormPOST>(httpResponse.response));
        }
        return response;
    }
    /**
     * Update users
     * 
     * @param Authorization Access token given
     * @param body JSON format of user data
     
     */
    public putUser(Authorization: string, body?: Array<UserDTO>, observe?: 'body', headers?: Headers): Observable<ResponseFormPOST>;
    public putUser(Authorization: string, body?: Array<UserDTO>, observe?: 'response', headers?: Headers): Observable<HttpResponse<ResponseFormPOST>>;
    public putUser(Authorization: string, body?: Array<UserDTO>, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!Authorization){
            throw new Error('Required parameter Authorization was null or undefined when calling putUser.');
        }

        if (Authorization) {
            headers['Authorization'] = String(Authorization);
        }

        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<ResponseFormPOST>> = this.httpClient.put(`${this.basePath}/users`, body , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <ResponseFormPOST>(httpResponse.response));
        }
        return response;
    }
}
