/**
 * 
 * 
 *
 * 
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from "rxjs/Observable";
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import IHttpClient from "../IHttpClient";
import { inject, injectable } from "inversify";
import { IAPIConfiguration } from "../IAPIConfiguration";
import { Headers } from "../Headers";
import HttpResponse from "../HttpResponse";

import { ResponseFormPOST } from '../model/responseFormPOST';
import { Vector } from '../model/vector';
import { VectorDTO } from '../model/vectorDTO';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class VectorsService {
    private basePath: string = 'https://localhost';

    constructor(@inject("IApiHttpClient") private httpClient: IHttpClient,
        @inject("IAPIConfiguration") private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }
    /**
     * Get a vector
     * Retrieve a vector. Need URL encoded vector URI
     * @param uri a sensor URI (Unique Resource Identifier)
     * @param Authorization Access token given
     * @param pageSize Number of elements per page (limited to 150000)
     * @param page Current page number
     
     */
    public getVectorDetails(uri: string, Authorization: string, pageSize?: number, page?: number, observe?: 'body', headers?: Headers): Observable<Array<Vector>>;
    public getVectorDetails(uri: string, Authorization: string, pageSize?: number, page?: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<Vector>>>;
    public getVectorDetails(uri: string, Authorization: string, pageSize?: number, page?: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!uri){
            throw new Error('Required parameter uri was null or undefined when calling getVectorDetails.');
        }

        if (!Authorization){
            throw new Error('Required parameter Authorization was null or undefined when calling getVectorDetails.');
        }

        let queryParameters: string[] = [];
        if (pageSize !== undefined) {
            queryParameters.push("pageSize="+encodeURIComponent(String(pageSize)));
        }
        if (page !== undefined) {
            queryParameters.push("page="+encodeURIComponent(String(page)));
        }

        if (Authorization) {
            headers['Authorization'] = String(Authorization);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Array<Vector>>> = this.httpClient.get(`${this.basePath}/vectors/${encodeURIComponent(String(uri))}?${queryParameters.join('&')}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<Vector>>(httpResponse.response));
        }
        return response;
    }
    /**
     * Get all vectors corresponding to the search params given
     * Retrieve all vectors authorized for the user corresponding to the searched params given
     * @param Authorization Access token given
     * @param pageSize Number of elements per page (limited to 150000)
     * @param page Current page number
     * @param uri Search by uri
     * @param rdfType Search by rdf type
     * @param label Search by label
     * @param brand Search by brand
     * @param serialNumber Search by serial number
     * @param inServiceDate Search by service date
     * @param dateOfPurchase Search by date of purchase
     * @param personInCharge Search by person in charge
     
     */
    public getVectorsBySearch(Authorization: string, pageSize?: number, page?: number, uri?: string, rdfType?: string, label?: string, brand?: string, serialNumber?: string, inServiceDate?: string, dateOfPurchase?: string, personInCharge?: string, observe?: 'body', headers?: Headers): Observable<Array<Vector>>;
    public getVectorsBySearch(Authorization: string, pageSize?: number, page?: number, uri?: string, rdfType?: string, label?: string, brand?: string, serialNumber?: string, inServiceDate?: string, dateOfPurchase?: string, personInCharge?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<Vector>>>;
    public getVectorsBySearch(Authorization: string, pageSize?: number, page?: number, uri?: string, rdfType?: string, label?: string, brand?: string, serialNumber?: string, inServiceDate?: string, dateOfPurchase?: string, personInCharge?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!Authorization){
            throw new Error('Required parameter Authorization was null or undefined when calling getVectorsBySearch.');
        }

        let queryParameters: string[] = [];
        if (pageSize !== undefined) {
            queryParameters.push("pageSize="+encodeURIComponent(String(pageSize)));
        }
        if (page !== undefined) {
            queryParameters.push("page="+encodeURIComponent(String(page)));
        }
        if (uri !== undefined) {
            queryParameters.push("uri="+encodeURIComponent(String(uri)));
        }
        if (rdfType !== undefined) {
            queryParameters.push("rdfType="+encodeURIComponent(String(rdfType)));
        }
        if (label !== undefined) {
            queryParameters.push("label="+encodeURIComponent(String(label)));
        }
        if (brand !== undefined) {
            queryParameters.push("brand="+encodeURIComponent(String(brand)));
        }
        if (serialNumber !== undefined) {
            queryParameters.push("serialNumber="+encodeURIComponent(String(serialNumber)));
        }
        if (inServiceDate !== undefined) {
            queryParameters.push("inServiceDate="+encodeURIComponent(String(inServiceDate)));
        }
        if (dateOfPurchase !== undefined) {
            queryParameters.push("dateOfPurchase="+encodeURIComponent(String(dateOfPurchase)));
        }
        if (personInCharge !== undefined) {
            queryParameters.push("personInCharge="+encodeURIComponent(String(personInCharge)));
        }

        if (Authorization) {
            headers['Authorization'] = String(Authorization);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Array<Vector>>> = this.httpClient.get(`${this.basePath}/vectors?${queryParameters.join('&')}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<Vector>>(httpResponse.response));
        }
        return response;
    }
    /**
     * Post a vector
     * Register a new vector in the database
     * @param Authorization Access token given
     * @param body JSON format of vector data
     
     */
    public post6(Authorization: string, body?: Array<VectorDTO>, observe?: 'body', headers?: Headers): Observable<ResponseFormPOST>;
    public post6(Authorization: string, body?: Array<VectorDTO>, observe?: 'response', headers?: Headers): Observable<HttpResponse<ResponseFormPOST>>;
    public post6(Authorization: string, body?: Array<VectorDTO>, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!Authorization){
            throw new Error('Required parameter Authorization was null or undefined when calling post6.');
        }

        if (Authorization) {
            headers['Authorization'] = String(Authorization);
        }

        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<ResponseFormPOST>> = this.httpClient.post(`${this.basePath}/vectors`, body , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <ResponseFormPOST>(httpResponse.response));
        }
        return response;
    }
    /**
     * Update vector
     * 
     * @param Authorization Access token given
     * @param body JSON format of vector data
     
     */
    public put7(Authorization: string, body?: Array<VectorDTO>, observe?: 'body', headers?: Headers): Observable<ResponseFormPOST>;
    public put7(Authorization: string, body?: Array<VectorDTO>, observe?: 'response', headers?: Headers): Observable<HttpResponse<ResponseFormPOST>>;
    public put7(Authorization: string, body?: Array<VectorDTO>, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!Authorization){
            throw new Error('Required parameter Authorization was null or undefined when calling put7.');
        }

        if (Authorization) {
            headers['Authorization'] = String(Authorization);
        }

        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<ResponseFormPOST>> = this.httpClient.put(`${this.basePath}/vectors`, body , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <ResponseFormPOST>(httpResponse.response));
        }
        return response;
    }
}
