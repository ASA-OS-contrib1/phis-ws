/**
 * 
 * 
 *
 * 
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from "rxjs/Observable";
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import IHttpClient from "../IHttpClient";
import { inject, injectable } from "inversify";
import { IAPIConfiguration } from "../IAPIConfiguration";
import { Headers } from "../Headers";
import HttpResponse from "../HttpResponse";

import { Property } from '../model/property';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class VocabulariesService {
    private basePath: string = 'https://localhost';

    constructor(@inject("IApiHttpClient") private httpClient: IHttpClient,
        @inject("IAPIConfiguration") private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }
    /**
     * Get all contact properties that can be added to a given rdfType
     * Retrieve all contact properties authorized
     * @param Authorization Access token given
     * @param rdfType Search by rdfType
     * @param pageSize Number of elements per page (limited to 150000)
     * @param page Current page number
     
     */
    public getContacts(Authorization: string, rdfType?: string, pageSize?: number, page?: number, observe?: 'body', headers?: Headers): Observable<Array<Property>>;
    public getContacts(Authorization: string, rdfType?: string, pageSize?: number, page?: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<Property>>>;
    public getContacts(Authorization: string, rdfType?: string, pageSize?: number, page?: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!Authorization){
            throw new Error('Required parameter Authorization was null or undefined when calling getContacts.');
        }

        let queryParameters: string[] = [];
        if (rdfType !== undefined) {
            queryParameters.push("rdfType="+encodeURIComponent(String(rdfType)));
        }
        if (pageSize !== undefined) {
            queryParameters.push("pageSize="+encodeURIComponent(String(pageSize)));
        }
        if (page !== undefined) {
            queryParameters.push("page="+encodeURIComponent(String(page)));
        }

        if (Authorization) {
            headers['Authorization'] = String(Authorization);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Array<Property>>> = this.httpClient.get(`${this.basePath}/vocabularies/contacts/properties?${queryParameters.join('&')}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<Property>>(httpResponse.response));
        }
        return response;
    }
    /**
     * Get all device properties that can be added to a given rdfType
     * Retrieve all device properties authorized
     * @param Authorization Access token given
     * @param rdfType Search by rdfType
     * @param pageSize Number of elements per page (limited to 150000)
     * @param page Current page number
     
     */
    public getDeviceProperties(Authorization: string, rdfType?: string, pageSize?: number, page?: number, observe?: 'body', headers?: Headers): Observable<Array<Property>>;
    public getDeviceProperties(Authorization: string, rdfType?: string, pageSize?: number, page?: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<Property>>>;
    public getDeviceProperties(Authorization: string, rdfType?: string, pageSize?: number, page?: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!Authorization){
            throw new Error('Required parameter Authorization was null or undefined when calling getDeviceProperties.');
        }

        let queryParameters: string[] = [];
        if (rdfType !== undefined) {
            queryParameters.push("rdfType="+encodeURIComponent(String(rdfType)));
        }
        if (pageSize !== undefined) {
            queryParameters.push("pageSize="+encodeURIComponent(String(pageSize)));
        }
        if (page !== undefined) {
            queryParameters.push("page="+encodeURIComponent(String(page)));
        }

        if (Authorization) {
            headers['Authorization'] = String(Authorization);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Array<Property>>> = this.httpClient.get(`${this.basePath}/vocabularies/devices/properties?${queryParameters.join('&')}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<Property>>(httpResponse.response));
        }
        return response;
    }
    /**
     * Get all triplestore namespaces
     * Retrieve all triplestore namespaces
     * @param Authorization Access token given
     * @param pageSize Number of elements per page (limited to 150000)
     * @param page Current page number
     
     */
    public getNamespaces(Authorization: string, pageSize?: number, page?: number, observe?: 'body', headers?: Headers): Observable<Array<Property>>;
    public getNamespaces(Authorization: string, pageSize?: number, page?: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<Property>>>;
    public getNamespaces(Authorization: string, pageSize?: number, page?: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!Authorization){
            throw new Error('Required parameter Authorization was null or undefined when calling getNamespaces.');
        }

        let queryParameters: string[] = [];
        if (pageSize !== undefined) {
            queryParameters.push("pageSize="+encodeURIComponent(String(pageSize)));
        }
        if (page !== undefined) {
            queryParameters.push("page="+encodeURIComponent(String(page)));
        }

        if (Authorization) {
            headers['Authorization'] = String(Authorization);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Array<Property>>> = this.httpClient.get(`${this.basePath}/vocabularies/namespaces?${queryParameters.join('&')}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<Property>>(httpResponse.response));
        }
        return response;
    }
    /**
     * Get all rdfs properties that can be added to an instance
     * Retrieve all rdfs properties authorized
     * @param Authorization Access token given
     * @param pageSize Number of elements per page (limited to 150000)
     * @param page Current page number
     
     */
    public getRdfs(Authorization: string, pageSize?: number, page?: number, observe?: 'body', headers?: Headers): Observable<Array<Property>>;
    public getRdfs(Authorization: string, pageSize?: number, page?: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<Property>>>;
    public getRdfs(Authorization: string, pageSize?: number, page?: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!Authorization){
            throw new Error('Required parameter Authorization was null or undefined when calling getRdfs.');
        }

        let queryParameters: string[] = [];
        if (pageSize !== undefined) {
            queryParameters.push("pageSize="+encodeURIComponent(String(pageSize)));
        }
        if (page !== undefined) {
            queryParameters.push("page="+encodeURIComponent(String(page)));
        }

        if (Authorization) {
            headers['Authorization'] = String(Authorization);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Array<Property>>> = this.httpClient.get(`${this.basePath}/vocabularies/rdfs/properties?${queryParameters.join('&')}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<Property>>(httpResponse.response));
        }
        return response;
    }
}
